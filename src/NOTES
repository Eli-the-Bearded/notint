
====== Eli the Bearded Notint Notes ======
==========================================

I couldn't decide originally between calling this eastris, easytris,
notint, or something else. Eventually I settled on notint and have
easytris as a game mode. The current modes:

A. Easytris

   This was my impetus for hacking the source. I wanted to explore
   the "easy" game version where you get the same piece over and over
   for a while. I find this harder than traditional, FWIW.

   As currently implemented for a stretch of 10 and 30 pieces in a row
   there's an 85% chance of each piece being the current designated
   selection. The 1x4 long piece is easiest to use. The 2x2 square is
   surprisingly unforgiving. To keep you on your toes, when getting
   the same piece over and over, this version randomizes the column
   that a piece starts falling from.

   Scoring starts the same as traditional, with the next piece preview
   penalty in effect. But there is also a bonus for lines cleared,
   since traditional scoring is rather heavy on the "how far it
   dropped" side.

B. Traditional

   Game play as in the original tint version. Score is mostly based
   on how far a piece was "dropped" from, with penalties for grid
   and next piece preview.

C. Zen

   Game play is as in the original. But speed never increases or
   decreases (unless you manually change the level with 'a' or 
   UP, which will wrap around from level 9 speeds back to level 1).
   Scoring is completely changed. All that matters is lines cleared.

D. Challenge

   Each level starts with a partially filled field which then
   refreshes after the "solve" criteria is met. Solving involves
   removing all of the pre-seeded blocks (which are marked).
   Removing rows without marked blocks incurs a small penalty.
   There's also a penalty for how many extra blocks are on the
   game board upon solving. The first eight levels have a series
   of unchanging challenges. Then it switches to random placement.

I had originally tried to keep the scores merged, but upon adding zen
it was clear that each mode should have it's own high score list.

FUTURE
------

Some better way of system versus $HOME directory scorefile. Compiled-in
fixed string is not very flexible.


BUILD
-----
I prefer "make", but the gmake version of the Makefile can do cross
compiles. There is a scoreconvert tool, that tries to convert score
files from older verstions. Probably no one wants to use it, but
it might be good reference code for the future. It also can be used
to create a pre-seeded high score list using author names.

The build and game has been tested on Linux and NetBSD with gcc. The
original source did not play well with NetBSD curses.

March 2018

====== Original Tint Notes ======
=================================

ROTATION
--------
STEP 1:
Drop the rotate() functions and make a datastructure which holds all the
shapes (and their rotated versions).

typedef struct
{
  int x,y;
} block_t;

typedef struct
{
  int color;
  int next;
  block_t block[NUMSHAPES];
} shape_t;

We then just hold the current blocknumber, when we rotate it, we replace it
with it's the next field, and so on.

STEP 2:
Also, make the board a one-dimensional array and get rid of the block_t
structure. The shape_t structure should look like this then:

typedef struct
{
  int next;
  int block[NUMSHAPES];
} shape_t;

Just make a array with the initial 7 colors, and keep that color until the
next piece is chosen. This should prove to be the optimal solution.

SCORE
-----

Ok, here's what I could figure out and what I think should be used.

1. We count the number of lines that a piece drops when the user press SPACE,
2. Add 1 to that when we figure out that the block has come to rest,
3. Multiply above by the current level,
4. If "Show Next" is enabled, divide by two, else take as is, and add the
   result to the score.

Of course, we should add 2 instead of 1 to prevent loss of precision in step
4, and the displayed score is then the score / 2.

TIMING
------

Here's what I'm going to use:

1. There is 9 levels, numbered from 1 to 9. We allow 1/level of a second to
   pass before we drop each block one line.

2. After each ten lines that is removed, we increase the level automatically,
   unless the player is already at the highest level (level 9). CAVEAT: If the
   user starts at a higher level than one, we pretend he didn't when we come
   to increasing levels, e.g. if he/she started at level 3, 30 lines must be
   dropped before we go to level 4.

3. I still have to decide whether to use the BSD type delaying (the type I'm
   currently using) or to do it the way I first did it (the signal handler
   method). The question remains which one is the most playable and which
   one is the most portable.

